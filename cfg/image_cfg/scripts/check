#! /bin/bash
COMPILE_FLAGS="-Werror -Wall -Wextra -Wpedantic -Wcast-align -Wcast-qual \
-Wconversion -Wenum-compare -Wfloat-equal -Wredundant-decls -Wsign-conversion -c -O3"
COMPILE_COV_FLAGS="-Werror -Wall -Wextra -Wpedantic -Wcast-align -Wcast-qual \
-Wconversion -Wenum-compare -Wfloat-equal -Wredundant-decls -Wsign-conversion"
SAMPLE_PATH_FLAG="-I/c_samples"
COVERAGE_FLAGS="-fprofile-arcs -ftest-coverage"
GAME_PATH="$1"

if [[ ${CI_PROJECT_NAME} == "iu7-games-${GL_GROUP_PRACTICE}"* ]]
then
    GITLAB_USER_LOGIN="$(echo "${CI_PROJECT_NAME}" | sed "s/iu7-games-"${GL_GROUP_PRACTICE}"-//")"
fi

echo -e "\033[0;34mCHECK SOURCE EXISTANCE\033[0m"
if [ -e ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c ]
then
    echo -e "\033[0;32m${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c FOUND\033[0m"
    SIGNATURE="$(grep "$3" ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c)n"
    echo -e "\033[0;34mCHECK SIGNATURE CORRECTNESS\033[0m"
    if [ "$SIGNATURE" = 'n' ]
    then
        echo -e "\033[0;31mWRONG SIGNATURE FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
        EXPECTED="$(echo $3 | sed -n 's/\\//pg')"
        echo -e "\033[0;34mEXPECTED\033[0m \033[1;33m${EXPECTED}\033[0m"
        echo -e "\033[0;31mCHECK FAILED\033[0m\n"
        exit 1
    else
        echo -e "\033[0;32mCORRECT SIGNATURE FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
    fi
    SPAM="$(cpp ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c | sed -n 's/\(system(.*)\)/\1/p')n
    $(cpp ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c | sed -n 's/\(fork()\)/\1/p')n
    $(cpp ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c | sed -n 's/\(exec.\{0,4\}(.*)\)/\1/p')n"
    SPAM=$(echo $SPAM | tr -d ' ')
    echo -e "\033[0;34mCHECK SPAM EXISTANCE\033[0m"
    if [ "$SPAM" = 'nnn' ]
    then
        echo -e "\033[0;32mNO SPAM FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
        gcc ${COMPILE_FLAGS} -fpic ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c
        if [ $? -ne 0 ]
        then
            echo -e "\033[0;31mCOMPILE ERRORS FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
            echo -e "\033[0;31mCHECK FAILED\033[0m\n"
            exit 1
        fi
        gcc -shared -o ${GITLAB_USER_LOGIN}_$2_lib.so ${GITLAB_USER_LOGIN}_$2.o
        if [ $? -ne 0 ]
        then
            echo -e "\033[0;31mLINK ERRORS FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
            echo -e "\033[0;31mCHECK FAILED\033[0m\n"
            exit 1
        fi
    else
        echo -e "\033[0;31mSPAM FOUND IN ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c\033[0m"
        echo -e "\033[1;33mCHECK YOUR SOURCE FOR CALLS OF:"
        echo -e "  system\n  fork\n  exec family\n  asm family\n  volatile\033[0m"
        echo -e "\033[0;31mCHECK FAILED\033[0m\n"
        exit 1
    fi
    if [[ ${CI_PROJECT_NAME} == "iu7-games-${GL_GROUP_PRACTICE}"* ]]
    then
        echo -e "\033[0;34mCHECK TEST SOURCE EXISTANCE\033[0m"
        if [ -e ${GAME_PATH}${GITLAB_USER_LOGIN}_$2_test.c ]
        then
            echo -e "\033[0;32m${GAME_PATH}${GITLAB_USER_LOGIN}_$2_test.c FOUND\033[0m"
            echo -e "\033[0;34mSTART YOUR UNIT TESTING\033[0m"
            gcc ${COMPILE_COV_FLAGS} -c -O3 ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2_test.c
            gcc ${COMPILE_COV_FLAGS} ${COVERAGE_FLAGS} -c -O3 ${SAMPLE_PATH_FLAG} ${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c
            gcc -lgcov --coverage -o test.exe ${GITLAB_USER_LOGIN}_$2_test.o ${GITLAB_USER_LOGIN}_$2.o
            ./test.exe
            lcov -t "test" -o test.info -c -d .
            genhtml -o ${GAME_PATH}${GITLAB_USER_LOGIN}_$2_codecoverage test.info
            echo -e "\033[0;32mUNIT TESTING FINISHED\033[0m"
        else
            echo -e "\033[0;31m${GAME_PATH}${GITLAB_USER_LOGIN}_$2_test.c NOT FOUND\033[0m\n"
            exit 1
        fi
    fi
    cp ${GITLAB_USER_LOGIN}_$2_lib.so /sandbox
    echo -e "\033[0;34mCHECK STRATEGY SAFETY\033[0m"
    PYTHONPATH='/' python /games/$4/$5 > temp.txt |:
    ERRMSG="$(cat temp.txt)y"
    SOLUTION="$(grep 'OK' temp.txt)s"
    if [ "$ERRMSG" = 'y' ]
    then
        cat temp.txt
        echo -e "\033[0;31mCHECK FAILED. ERROR OCCURED\033[0m\n"
        rm -f temp.txt
        exit 1
    elif [ "$SOLUTION" = 's' ]
    then
        cat temp.txt
        echo -e "\033[0;31mCHECK FAILED. YOUR STRATEGY FAILED\033[0m\n"
        rm -f temp.txt
        exit 1
    else
        cat temp.txt
        echo -e "\033[0;32mCHECK PASSED\033[0m\n"
        rm -f temp.txt
    fi
else
    echo -e "\033[0;31m${GAME_PATH}${GITLAB_USER_LOGIN}_$2.c NOT FOUND\033[0m\n"
    exit 1
fi
